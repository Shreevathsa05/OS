class Main {
    public static void main(String[] args) {
        Object forks[]=new Object[5];
        for(int i=0;i<5;i++)
        {
            forks[i]=new Object();
        }
        Philosopher[] p=new Philosopher[5];
        for(int i=0;i<5;i++)
        {
            Object leftFork=forks[i];
            Object rightFork=forks[(i+1)%5];
            p[i]=new Philosopher(i,leftFork,rightFork);
            p[i].start();
        }
    }
}

class Philosopher extends Thread
{
    private int id;
    private Object leftFork;
    private Object rightFork;
    public Philosopher(int id, Object leftFork, Object rightFork)
    {
        this.id=id;
        this.leftFork=leftFork;
        this.rightFork=rightFork;
    }
    public void run ()
    {int i=0;
       try
       {
            while(i<5)
        {
            think();
            synchronized (leftFork)
            {System.out.println("Philosopher"+ id+ " picked up leftFork");}
            synchronized (rightFork)
            {
                System.out.println("Philosopher"+ id+ " picked up rightFork");
                eat();
                System.out.println("Philosopher"+ id+ " put down rightFork");
            }
            System.out.println("Philosopher"+ id+ " put down leftFork");
            i++;
        }
       }catch(Exception e)
       {Thread.currentThread().interrupt();}
    }
    public void eat() throws Exception
    {
        System.out.println("Philosopher"+id+" is eating");
        Thread.sleep((int)(Math.random()*1000));
    }
    public void think() throws Exception
    {
        System.out.println("Philosopher"+id+" is thinking");
        Thread.sleep((int)(Math.random()*1000));
    }
}
